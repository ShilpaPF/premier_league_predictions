#Import necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.model_selection import GridSearchCV
import warnings
warnings.filterwarnings('ignore')
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler

# Load the dataset
file_path = "/content/drive/MyDrive/Premier_League_Data.csv"
df = pd.read_csv(file_path)

# Create a mapping from numeric codes to actual team names
team_mapping = dict(enumerate(df['Team'].unique()))

# Convert Date to datetime
df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y')

# Feature engineering
df['Day_of_Week'] = df['Date'].dt.dayofweek
df['Month'] = df['Date'].dt.month
df['Year'] = df['Date'].dt.year
df['Goal_Difference'] = df['Goals For'] - df['Goals Against']
df['Goal_Ratio'] = df['Goals For'] / (df['Goals Against'] + 1)  # Add 1 to avoid division by zero
df['Shot_Accuracy'] = df['Shots on Target'] / df['Shots']
df['Expected_Goal_Difference'] = df['Expected Goals'] - df['Expected Goals Against']
# Display basic information about the dataset
print(df.info())
print(df.describe())

# Check for missing values
print(df.isnull().sum()

#Select features for clustering
cluster_features = ['Goals For', 'Goals Against', 'Expected Goals', 'Expected Goals Against', 'Possession', 'Shots', 'Shots on Target']

# Prepare data for clustering
X_cluster = df[cluster_features]

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X_cluster)

# Perform K-means clustering
# Select features for clustering
cluster_features = ['Expected Goals', 'Expected Goals Against', 'Possession', 'Shots', 'Shots on Target']

# Normalize the features
scaler = StandardScaler()
X_cluster = scaler.fit_transform(df[cluster_features])

# Perform K-means clustering
kmeans = KMeans(n_clusters=3, random_state=42)
df['Cluster'] = kmeans.fit_predict(X_cluster)

# Calculate average values for each team
team_avg = df.groupby('Team')[cluster_features].mean().reset_index()
team_avg['Cluster'] = kmeans.predict(scaler.transform(team_avg[cluster_features]))

# Visualize the clusters with team labels
plt.figure(figsize=(11,10))
scatter = plt.scatter(team_avg['Expected Goals'], team_avg['Expected Goals Against'], 
                      c=team_avg['Cluster'], cmap='viridis', s=100, alpha=0.7)

# Add team labels
for idx, row in team_avg.iterrows():
    plt.annotate(row['Team'], (row['Expected Goals'], row['Expected Goals Against']), 
                 xytext=(5, 5), textcoords='offset points', fontsize=8, alpha=0.8)

plt.xlabel('Expected Goals')
plt.ylabel('Expected Goals Against')
plt.title('Team Clusters based on Expected Goals (Team Averages)')
plt.colorbar(scatter, label='Cluster')
plt.tight_layout()
plt.show()

# Print cluster information
for i in range(3):
    cluster_teams = team_avg[team_avg['Cluster'] == i]['Team'].tolist()
    print(f"\nCluster {i} Teams:")
    print(", ".join(cluster_teams))
    print("\nCluster Statistics:")
    print(team_avg[team_avg['Cluster'] == i][cluster_features].mean())
# Print cluster centroids
centroids = scaler.inverse_transform(kmeans.cluster_centers_)
centroid_df = pd.DataFrame(centroids, columns=cluster_features)
print("Cluster Centroids:")
print(centroid_df)

# Analyze clusters
for i in range(3):
    print(f"\nCluster {i}:")
    print(df[df['Cluster'] == i]['Team'].value_counts())
    print(df[df['Cluster'] == i][cluster_features].mean())

# Convert categorical variables to numeric
le = LabelEncoder()
categorical_cols = ['Team', 'Opponent', 'Venue', 'Result', 'Captain', 'Formation', 'Referee', 'Competition', 'Round', 'Day']
for col in categorical_cols:
    df[col] = le.fit_transform(df[col].astype(str))

# Map team numbers back to names
df['Team'] = df['Team'].map(team_mapping)

# Remove outliers using IQR method
def remove_outliers(df, columns):
    for col in columns:
        Q1 = df[col].quantile(0.25)
        Q3 = df[col].quantile(0.75)
        IQR = Q3 - Q1
        lower_bound = Q1 - 1.5 * IQR
        upper_bound = Q3 + 1.5 * IQR
        df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
    return df

numeric_columns = ['Goals For', 'Goals Against', 'Expected Goals', 'Expected Goals Against', 'Possession', 'Shots', 'Shots on Target']

print("Shape before removing outliers:", df.shape)
df = remove_outliers(df, numeric_columns)
print("Shape after removing outliers:", df.shape)

# Display all column names and their data types
print("All columns and their data types:")
print(df.dtypes)

# Identify numeric columns
numeric_cols = df.select_dtypes(include=[np.number]).columns
print("\nNumeric columns found:", numeric_cols.tolist())

# Create a mapping for seasons
df['Season'] = df['Year'].where(df['Month'] > 7, df['Year'] - 1)

# Count the number of matches per season
season_counts = df['Season'].value_counts().sort_index()

# Create a bar chart
plt.figure(figsize=(12, 6))
season_counts.plot(kind='bar')
plt.title('Distribution of Matches Across Seasons', fontsize=16)
plt.xlabel('Season', fontsize=12)
plt.ylabel('Number of Matches', fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Print the number of matches per season
print("Number of matches per season:")
print(season_counts)

# Calculate average possession for each team
team_avg_possession = df.groupby('Team')['Possession'].mean().sort_values(ascending=False)

# Print average possession for each team
print("Average possession for each team:")
print(team_avg_possession)

# Calculate average goals scored by each team
team_avg_goals = df.groupby('Team')['Goals For'].mean().sort_values(ascending=False)
# Select top 10 scoring teams
top_10_teams = team_avg_goals.head(10).index

# Create a 2x5 subplot for the top 10 teams
fig, axes = plt.subplots(2, 5, figsize=(20, 10))
fig.suptitle('Distribution of Goals Scored by Top 10 Teams', fontsize=16)

for i, team in enumerate(top_10_teams):
    row = i // 5
    col = i % 5
    ax = axes[row, col]

    team_data = df[df['Team'] == team]
    sns.histplot(data=team_data, x='Goals For', kde=True, bins=range(0, int(team_data['Goals For'].max()) + 2),
                 color=plt.cm.Set3(i), ax=ax)

# Print average goals for top 10 teams
print("Average goals scored by top 10 teams:")
print(team_avg_goals.head(10)

    ax.set_title(team_mapping.get(team, f'Team {team}'), fontsize=10)
    ax.set_xlabel('Goals Scored', fontsize=8)
    ax.set_ylabel('Count', fontsize=8)

plt.tight_layout()
plt.show()

# Print summary for goals scored by each team
team_goals = df.groupby('Team')['Goals For'].agg(['mean', 'median', 'max'])
print("\nGoals scored by each team:")
print(team_goals.sort_values('mean', ascending=False))

# Visualizations
plt.figure(figsize=(12, 6))
sns.barplot(x=team_avg_goals.index, y=team_avg_goals.values)
plt.title('Average Goals Scored by Each Team')
plt.xticks(rotation=90)
plt.tight_layout()
plt.show()

# Home vs Away performance
home_performance = df[df['Venue'] == 0]['Goals For'].mean()
away_performance = df[df['Venue'] == 1]['Goals For'].mean()
plt.figure(figsize=(8, 5))
plt.bar(['Home', 'Away'], [home_performance, away_performance])
plt.title('Average Goals Scored: Home vs Away', fontsize=14)
plt.ylabel('Average Goals', fontsize=12)
plt.show()

# Prepare data for modeling
features = ['Venue', 'Opponent', 'Expected Goals', 'Expected Goals Against', 'Possession', 'Shots',
            'Shots on Target', 'Distance', 'Free Kicks', 'Penalty Kicks', 'Penalty Kicks Attempted',
            'Goal_Difference', 'Goal_Ratio', 'Shot_Accuracy', 'Expected_Goal_Difference']
X = df[features]
y = df['Result']

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Check for NaN values
print("Columns with NaN values:")
print(X.isna().sum())

# Impute missing values
imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)
X_test_imputed = imputer.transform(X_test)

# Scale the imputed features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train_imputed)
X_test_scaled = scaler.transform(X_test_imputed)


# Define models
rf = RandomForestClassifier(random_state=42)
gb = GradientBoostingClassifier(random_state=42)
svm = SVC(probability=True, random_state=42)

# Create a dictionary of models
models = {
    'Random Forest': rf,
    'Gradient Boosting': gb,
    'SVM': svm
}

# Train and evaluate each model
for name, model in models.items():
    model.fit(X_train_scaled, y_train)
    y_pred = model.predict(X_test_scaled)

# Feature importance (for Random Forest)
feature_importance = pd.DataFrame({
    'feature': features,
    'importance': rf.feature_importances_
}).sort_values('importance', ascending=False)

print("\nTop 5 Most Important Features:")
print(feature_importance.head())
    accuracy = accuracy_score(y_test, y_pred)
    print(f"\n{name} Accuracy: {accuracy:.4f}")
    print(f"{name} Classification Report:")
    print(classification_report(y_test, y_pred))

# Create a horizontal bar plot for feature importance
plt.figure(figsize=(10, 8))
sns.barplot(x='importance', y='feature', data=feature_importance.head(15), palette='viridis')
plt.title('Top 15 Most Important Features', fontsize=16)
plt.xlabel('Importance', fontsize=12)
plt.ylabel('Feature', fontsize=12)
plt.tight_layout()
plt.show()

# Create a correlation heatmap
plt.figure(figsize=(12, 10))
sns.heatmap(df[features].corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)
plt.title('Correlation Heatmap of Features', fontsize=16)
plt.tight_layout()
plt.show()

# Adjacent graphs for full-time home & away goals, half-time home & away goals, and home & away shots on target
fig, axs = plt.subplots(3, 2, figsize=(8, 7))
fig.suptitle('Home vs Away Statistics', fontsize=20)

# Full-time goals
sns.histplot(data=df[df['Venue'] == 0], x='Goals For', kde=True, color='blue', ax=axs[0, 0])
axs[0, 0].set_title('Full-time Goals (Home)', fontsize=14)
axs[0, 0].set_xlabel('Goals')
sns.histplot(data=df[df['Venue'] == 1], x='Goals For', kde=True, color='orange', ax=axs[0, 1])
axs[0, 1].set_title('Full-time Goals (Away)', fontsize=14)
axs[0, 1].set_xlabel('Goals')

# Half-time goals (assuming 'HG' is the column for half-time goals)
if 'HG' in df.columns:
    sns.histplot(data=df[df['Venue'] == 0], x='HG', kde=True, color='blue', ax=axs[1, 0])
    axs[1, 0].set_title('Half-time Goals (Home)', fontsize=14)
    axs[1, 0].set_xlabel('Goals')
    sns.histplot(data=df[df['Venue'] == 1], x='HG', kde=True, color='orange', ax=axs[1, 1])
    axs[1, 1].set_title('Half-time Goals (Away)', fontsize=14)
    axs[1, 1].set_xlabel('Goals')
else:
    axs[1, 0].text(0.5, 0.5, 'Half-time goals data not available', ha='center', va='center')
    axs[1, 1].text(0.5, 0.5, 'Half-time goals data not available', ha='center', va='center')

# Shots on target
sns.histplot(data=df[df['Venue'] == 0], x='Shots on Target', kde=True, color='blue', ax=axs[2, 0])
axs[2, 0].set_title('Shots on Target (Home)', fontsize=14)
axs[2, 0].set_xlabel('Number of Shots')
sns.histplot(data=df[df['Venue'] == 1], x='Shots on Target', kde=True, color='orange', ax=axs[2, 1])
axs[2, 1].set_title('Shots on Target (Away)', fontsize=14)
axs[2, 1].set_xlabel('Number of Shots')

plt.tight_layout()
plt.show()

# Create the home vs away performance plot
plt.figure(figsize=(8, 5))
df['Points'] = df['Result'].map({0: 0, 1: 1, 2: 3})

# Calculate home and away performance separately
home_performance = df[df['Venue'] == 0].groupby('Team')['Points'].mean()
away_performance = df[df['Venue'] == 1].groupby('Team')['Points'].mean()

# Combine home and away performance
performance = pd.DataFrame({
    'Home': home_performance,
    'Away': away_performance
}).reset_index()

# Sort teams by total performance (home + away)
performance['Total'] = performance['Home'] + performance['Away']
performance = performance.sort_values('Total', ascending=False)
# Create the plot
sns.barplot(data=performance, x='Team', y='Home', color='blue', label='Home')
sns.barplot(data=performance, x='Team', y='Away', color='orange', label='Away')
plt.title('Home vs Away Performance for Teams', fontsize=16)
plt.xlabel('Team', fontsize=12)
plt.ylabel('Average Points', fontsize=12)
plt.xticks(rotation=90, fontsize=8)  # Reduced font size for readability
plt.legend(loc='upper right', fontsize=12)
plt.tight_layout()
plt.show()
